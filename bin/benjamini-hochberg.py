#!/usr/bin/env python
from __future__ import print_function, division
from optparse import OptionParser
import os
import sys
import bisect

__author__ = "Louis Dijkstra"

usage = """%prog [options] <calls-file> 

	<calls-file>	output file generated by sm_caller

Determines gamma that guarantees controlling the false discovery rate
according to the Benjamini-Hochberg procedure.
"""

ALPHAS = [0.001, 0.005, 0.01, 0.05, 0.1, 0.25] # all the beta used 

def main():

	parser = OptionParser(usage=usage)
	parser.add_option("-a", action="store", dest="own_alpha", type=float, default=None,
						help="Adds this alpha (at which FDR is to be controlled) to the list alphas")
	parser.add_option("-v", action="store_true", dest="verbose", default=False,
                      		help="Verbose. Prints regularly how many variants have been processed.")
	(options, args) = parser.parse_args()
	
	if (len(args)!=1):
		parser.print_help()
		return 

	calls_filename 		= os.path.abspath(args[0])
	calls_file		= open(calls_filename, 'r') ; 

	if options.own_alpha != None:
		ALPHAS.append(options.own_alpha)
		ALPHAS.sort() 

	somatic_posterior_probabilities = []

	n = 0 
	for line in calls_file: 
		n += 1 
		if options.verbose and n % 10000 == 0: 
			print("Processed %d variants"%n)

		values 	= line.split('\t')

		if len(values) != 10:
			break 

		if values[7].strip() != '.':	
			somatic_posterior_probabilities.append(float(values[7]))

	print("Sorting all probabilities...")
	somatic_posterior_probabilities.sort(reverse=True)
	print("DONE Sorting all probabilities...")

	# initialization		
	n = len(somatic_posterior_probabilities)
        i = 0
        alpha = ALPHAS[i]
        End = False
        GAMMAS = [0.0]*len(ALPHAS)
        for k, somprob in enumerate(somatic_posterior_probabilities):
            gamma = 1.0 - somprob
            while gamma > ((k+1)/n) * alpha:
                if k >= 1:
                    GAMMAS[i] = 1.0-somatic_posterior_probabilities[k-1]
                else: # k == 0
                    GAMMAS[i] = 0.0
                i += 1
                if i >= len(ALPHAS):
                    End = True
                    break
                else:
                    alpha = ALPHAS[i]
            if End:
                break
        

        for j in range(len(ALPHAS)):
            print("FDR: %.4f, Gamma: %.8f" % (ALPHAS[j], GAMMAS[j]))

#	print("*** Results ***\n")
#	print("beta\tmax. exp. F-score\tpost. prob. threshold\tgamma")
#	print("----\t-----------------\t---------------------\t-----")
#	for i, beta in enumerate(BETAS):
#		print("%.4f\t%.8f\t\t%.8f\t\t%.8f"%(beta, max_f_score[i], 1.0 - gamma[i], gamma[i]))
#	print("----\t-----------------\t---------------------\t-----\n")
			 

if __name__ == '__main__':
	sys.exit(main())
