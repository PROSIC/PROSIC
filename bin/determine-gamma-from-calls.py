#!/usr/bin/env python
from __future__ import print_function, division
from optparse import OptionParser
import os
import sys
import bisect

__author__ = "Louis Dijkstra"

usage = """%prog [options] <calls-file> 

	<calls-file>	output file generated by sm_caller

Determines gamma such that the expected F_beta score is
maximized. 
"""

BETAS = [0.125, 0.25, 0.5, 1.0, 2.0] # all the beta used 

def main():

	parser = OptionParser(usage=usage)
	parser.add_option("-b", action="store", dest="own_beta", type=float, default=None,
						help="Adds this beta to the list to be used")
	parser.add_option("-v", action="store_true", dest="verbose", default=False,
                      		help="Verbose. Prints regularly how many variants have been processed.")
	(options, args) = parser.parse_args()
	
	if (len(args)!=1):
		parser.print_help()
		return 

	calls_filename 		= os.path.abspath(args[0])
	calls_file		= open(calls_filename, 'r') ; 

	if options.own_beta != None:
		BETAS.append(options.own_beta)
		BETAS.sort() 

	somatic_posterior_probabilities = []

	n = 0 
	for line in calls_file: 
		n += 1 
		if options.verbose and n % 10000 == 0: 
			print("Processed %d variants"%n)

		values 	= line.split('\t')

		if len(values) != 10:
			break 

		if values[7].strip() != '.':	
			somatic_posterior_probabilities.append(float(values[7]))

	print("Sorting all probabilities...")
	somatic_posterior_probabilities.sort(reverse=True)
	print("DONE Sorting all probabilities...")

	# initialization		
	n		= len(somatic_posterior_probabilities)	
	S_n 		= sum(somatic_posterior_probabilities)
	S_k 		= somatic_posterior_probabilities[0]
	
	f_score		= 0.0
	max_f_score 	= [0.0 for i in range(len(BETAS))] 
	gamma		= [S_k for i in range(len(BETAS))] 
	for i, beta in enumerate(BETAS):
		max_f_score[i] 	= (1.0 + beta**2) * S_k / (beta**2 * S_n + 1.0) # F-beta score for k = 1
		
	for k in range(2,n+1):
		S_k += somatic_posterior_probabilities[k-1] 
		for i, beta in enumerate(BETAS):
			f_score = (1.0 + beta**2) * S_k / (beta**2 * S_n + k)
			if f_score > max_f_score[i]:
				max_f_score[i] = f_score
				gamma[i] = 1.0 - somatic_posterior_probabilities[k-1] 

		
	print("*** Results ***\n")
	print("beta\tmax. exp. F-score\tpost. prob. threshold\tgamma")
	print("----\t-----------------\t---------------------\t-----")
	for i, beta in enumerate(BETAS):
		print("%.4f\t%.8f\t\t%.8f\t\t%.8f"%(beta, max_f_score[i], 1.0 - gamma[i], gamma[i]))
	print("----\t-----------------\t---------------------\t-----\n")
			 

if __name__ == '__main__':
	sys.exit(main())
